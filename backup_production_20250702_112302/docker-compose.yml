services:
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  web:
    build: .
    command: python run_web.py
    volumes:
      - ./outputs:/app/outputs
      - ./uploads:/app/uploads
    ports:
      - "5000:5000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLASK_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # High-performance batch processing workers
  batch-worker:
    build: .
    command: rq worker --url redis://redis:6379/0 batch_processing
    volumes:
      - ./outputs:/app/outputs
      - ./uploads:/app/uploads
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 8  # Scale to 8 workers for batch processing
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Merge processing workers (for final file generation)
  merge-worker:
    build: .
    command: rq worker --url redis://redis:6379/0 merge_processing
    volumes:
      - ./outputs:/app/outputs
      - ./uploads:/app/uploads
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2  # Fewer workers for merge operations
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1.5G
          cpus: '0.75'

  # Legacy worker for backward compatibility
  worker:
    build: .
    command: rq worker --url redis://redis:6379/0
    volumes:
      - ./outputs:/app/outputs
      - ./uploads:/app/uploads
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G 